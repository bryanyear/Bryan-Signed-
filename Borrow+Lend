// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract SimpleDeFi {
    using SafeMath for uint256;

    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public debts;

    event Borrow(address indexed borrower, uint256 amount);
    event Repay(address indexed borrower, uint256 amount);

    function borrow(address token, uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(debts[msg.sender][token] == 0, "You already have an outstanding debt");

        IERC20(token).transfer(msg.sender, amount);
        debts[msg.sender][token] = debts[msg.sender][token].add(amount);

        emit Borrow(msg.sender, amount);
    }

    function repay(address token, uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(debts[msg.sender][token] >= amount, "Insufficient debt to repay");

        IERC20(token).transferFrom(msg.sender, address(this), amount);
        debts[msg.sender][token] = debts[msg.sender][token].sub(amount);

        emit Repay(msg.sender, amount);
    }
}
